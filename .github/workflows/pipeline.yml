name: Build and Deploy SmartE-commercePlatform (Backend + Frontend)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  # Variabile comune
  SONAR_PROJECT_KEY: DMG0411_SmartE-CommercePlatform
  SONAR_ORGANIZATION: dmg0411

  # Variabile backend
  AZURE_WEBAPP_NAME: SmartE-commercePlatform
  AZURE_WEBAPP_PACKAGE_PATH: SmartE-commercePlatform/publish
  CONFIGURATION: Release
  DOTNET_CORE_VERSION: 8.0.x
  WORKING_DIRECTORY_BACKEND: Backend/SmartE-commercePlatform.sln

  # Variabile frontend
  FRONTEND_WORKING_DIRECTORY: Frontend/smart-ecommerce-platform

jobs:
  build-analyze-backend:
    runs-on: ubuntu-latest
    steps:
      # Pasul 1: Checkout codul pentru backend
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17 for Backend
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Setup .NET SDK for Backend
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_CORE_VERSION }}

      - name: Install SonarQube Scanner locally for Backend
        run: |
          dotnet tool install dotnet-sonarscanner --tool-path ./.tools

      - name: Add SonarQube Scanner to PATH for Backend
        run: echo "$PWD/.tools" >> $GITHUB_PATH

      - name: Restore dependencies for Backend
        run: dotnet restore ${{ env.WORKING_DIRECTORY_BACKEND }}

      - name: Begin SonarQube Analysis for Backend
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner begin \
            /k:"${{ env.SONAR_PROJECT_KEY }}" \
            /o:"${{ env.SONAR_ORGANIZATION }}" \
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" \
            /d:sonar.coverage.exclusions="**/*Tests*/**,**/Program.cs,**/Startup.cs"

      - name: Build the Backend project
        run: dotnet build ${{ env.WORKING_DIRECTORY_BACKEND }} --configuration ${{ env.CONFIGURATION }} --no-restore

      - name: Run tests with coverage for Backend
        run: |
          dotnet test ${{ env.WORKING_DIRECTORY_BACKEND }} \
            --configuration ${{ env.CONFIGURATION }} \
            --collect:"XPlat Code Coverage" \
            --logger trx \
            --results-directory "./TestResults" \
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
        env:
          CoverletOutput: ./TestResults/coverage
          CoverletOutputFormat: opencover

      - name: List Backend coverage reports
        run: ls -R TestResults/

      - name: Complete SonarQube Analysis for Backend
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

      - name: Publish Backend application
        run: dotnet publish ${{ env.WORKING_DIRECTORY_BACKEND }} --configuration ${{ env.CONFIGURATION }} --no-build --output ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

      - name: Publish Backend Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: backend-webapp
          path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

  build-analyze-frontend:
    runs-on: ubuntu-latest
    steps:
      # Pasul 2: Checkout codul pentru frontend
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17 for Frontend
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Set up Node.js for Frontend
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies for Frontend
        working-directory: ${{ env.FRONTEND_WORKING_DIRECTORY }}
        run: npm install

      - name: Run unit tests with coverage for Frontend
        working-directory: ${{ env.FRONTEND_WORKING_DIRECTORY }}
        run: npm run test:coverage
    
      - name: List Frontend coverage reports
        working-directory: ${{ env.FRONTEND_WORKING_DIRECTORY }}
        run: ls -R coverage/

      - name: SonarQube Scan for Frontend
        uses: sonarsource/sonarqube-scan-action@v4.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: ${{ env.FRONTEND_WORKING_DIRECTORY }}
          args: >
            -Dsonar.organization=${{ env.SONAR_ORGANIZATION }}
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
            -Dsonar.sources=src
            -Dsonar.tests=src
            -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.coverage.exclusions="**/*.spec.ts,**/main.ts,**/environments/**,src/setup.jest.ts"
            -Dsonar.test.inclusions="**/*.spec.ts"

      - name: Build Angular app for Frontend
        working-directory: ${{ env.FRONTEND_WORKING_DIRECTORY }}
        run: npm run build -- --configuration=production --base-href "https://dmg0411.github.io/SmartE-CommercePlatform/"

      - name: Deploy Frontend to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          folder: ${{ env.FRONTEND_WORKING_DIRECTORY }}/dist/smart-ecommerce-platform
          branch: gh-pages
          clean: true

  deploy:
    runs-on: ubuntu-latest
    needs: [build-analyze-backend, build-analyze-frontend]
    steps:
      - name: Download Backend Artifact
        uses: actions/download-artifact@v3
        with:
          name: backend-webapp
          path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

      - name: Deploy Backend to Azure WebApp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
          publish-profile: ${{ secrets.SmartE_commercePlatform_C7C9 }}

      - name: Azure Login for API Management
        uses: azure/login@v1
        with:
          creds: ${{ secrets.SmartE_commercePlatformapi_SPN }}

      - name: Create API in Azure API Management
        run: |
          az apim api create \
            --resource-group "${{ env.AZURE_APIM_RESOURCEGROUP }}" \
            --service-name "${{ env.AZURE_APIM_SERVICENAME }}" \
            --api-id "${{ env.AZURE_APIM_API_ID }}" \
            --path "${{ env.AZURE_APIM_RESOURCE_PATH }}" \
            --service-url "${{ env.AZURE_APIM_APPSERVICEURL }}" \
            --display-name "SmartE-commercePlatform API" \
            --description "API for SmartE-commercePlatform" \
            --protocols "https"

      - name: Logout from Azure
        run: az logout
