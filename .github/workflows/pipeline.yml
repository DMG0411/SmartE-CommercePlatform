name: Build, Analyze and Deploy (Frontend + Backend)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write
  pages: write
  id-token: write

env:
  # Variables for SonarQube Analysis
  SONAR_ORGANIZATION: dmg0411
  SONAR_PROJECT_KEY_BACKEND: SmartE-commercePlatform-Backend
  SONAR_PROJECT_KEY_FRONTEND: SmartE-commercePlatform-Frontend
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  # Azure Variables
  AZURE_WEBAPP_NAME: SmartE-commercePlatform
  AZURE_WEBAPP_PACKAGE_PATH: SmartE-commercePlatform/publish
  CONFIGURATION: Release
  DOTNET_CORE_VERSION: 8.0.x
  WORKING_DIRECTORY_BACKEND: Backend/SmartE-commercePlatform.sln
  WORKING_DIRECTORY_FRONTEND: Frontend/smart-ecommerce-platform

jobs:
  build-analyze-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code for both frontend and backend
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Setup JDK 17 for SonarQube Analysis (required for both frontend & backend)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'

      # Setup .NET SDK (for backend)
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_CORE_VERSION }}

      # Setup Node.js (for frontend)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Install backend dependencies
      - name: Restore .NET dependencies for Backend
        run: dotnet restore ${{ env.WORKING_DIRECTORY_BACKEND }}

      # Install frontend dependencies
      - name: Install dependencies for Frontend
        working-directory: ${{ env.WORKING_DIRECTORY_FRONTEND }}
        run: npm install

      # Run unit tests and generate coverage for Backend (.NET)
      - name: Run .NET tests with coverage (Backend)
        run: |
          dotnet test ${{ env.WORKING_DIRECTORY_BACKEND }} \
            --configuration ${{ env.CONFIGURATION }} \
            --collect:"XPlat Code Coverage" \
            --logger trx \
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover

      # Run unit tests and generate coverage for Frontend (Angular + Jest)
      - name: Run Jest tests with coverage (Frontend)
        working-directory: ${{ env.WORKING_DIRECTORY_FRONTEND }}
        run: npm run test:coverage

      # Begin SonarQube Analysis for Backend
      - name: Begin SonarQube Analysis for Backend
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          dotnet sonarscanner begin \
            /k:"${{ env.SONAR_PROJECT_KEY_BACKEND }}" \
            /o:"${{ env.SONAR_ORGANIZATION }}" \
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" \
            /d:sonar.coverage.exclusions="**/*Tests*/**,**/Program.cs,**/Startup.cs"

      # SonarQube analysis for Frontend (Angular)
      - name: SonarQube Scan for Frontend
        uses: sonarsource/sonarqube-scan-action@v4.1.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          projectBaseDir: ${{ env.WORKING_DIRECTORY_FRONTEND }}
          args: >
            -Dsonar.organization=${{ env.SONAR_ORGANIZATION }}
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY_FRONTEND }}
            -Dsonar.sources=src
            -Dsonar.tests=src
            -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.coverage.exclusions="**/*.spec.ts,**/main.ts,**/environments/**,src/setup.jest.ts"
            -Dsonar.test.inclusions="**/*.spec.ts"

      # Build .NET Backend Application
      - name: Build .NET Backend Application
        run: dotnet build ${{ env.WORKING_DIRECTORY_BACKEND }} --configuration ${{ env.CONFIGURATION }} --no-restore

      # Complete SonarQube Analysis for Backend
      - name: Complete SonarQube Analysis for Backend
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

      # Build Angular Frontend Application
      - name: Build Angular Application (Frontend)
        working-directory: ${{ env.WORKING_DIRECTORY_FRONTEND }}
        run: npm run build -- --configuration=production --base-href "https://dmg0411.github.io/SmartE-CommercePlatform/"

      # Deploy Backend Application to Azure (Azure WebApp)
      - name: Deploy Backend to Azure WebApp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
          publish-profile: ${{ secrets.SmartE_commercePlatform_C7C9 }}

      # Deploy Frontend Application to GitHub Pages
      - name: Deploy Frontend to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          folder: ${{ env.WORKING_DIRECTORY_FRONTEND }}/dist/smart-ecommerce-platform
          branch: gh-pages
          clean: true

      # Create API in Azure API Management (Backend)
      - name: Create API in Azure API Management
        run: |
          az apim api create \
            --resource-group "DefaultResourceGroup-DEWC" \
            --service-name "SmartE-commercePlatformapi" \
            --api-id "SmartE-commercePlatform" \
            --path "/" \
            --service-url "https://smarte-commerceplatform.azurewebsites.net" \
            --display-name "SmartE-commercePlatform API" \
            --description "API for SmartE-commercePlatform" \
            --protocols "https"

      # Logout from Azure
      - name: Logout from Azure
        run: az logout
